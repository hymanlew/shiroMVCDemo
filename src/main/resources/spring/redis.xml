<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:cache="http://www.springframework.org/schema/cache" xmlns:c="http://www.springframework.org/schema/c"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd">

    <cache:annotation-driven />

    <bean id="jedisConnFactory"
          class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"
          p:hostName="${jedis.host}" p:use-pool="true" p:password="${jedis.password}" />

    <!-- redis template definition -->
    <!-- <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate"
        p:connection-factory-ref="jedisConnFactory"/> -->
    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
        <property name="connectionFactory" ref="jedisConnFactory" /> <!-- 新增 -->
        <property name="keySerializer" ref="stringRedisSerializer" />
        <property name="valueSerializer" ref="genericJackson2JsonRedisSerializer" />
    </bean>

    <bean id="redisCacheManager" class="org.springframework.data.redis.cache.RedisCacheManager">
        <constructor-arg ref="redisTemplate" />
        <constructor-arg name="cacheNames">
            <set>
                <value>cms-application</value>
                <value>RedisCommonCache</value>
            </set>
        </constructor-arg>
        <property name="defaultExpiration" value="3600" />
    </bean>

    <bean id="genericJackson2JsonRedisSerializer"
          class="org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer" />
    <bean id="stringRedisSerializer"
          class="org.springframework.data.redis.serializer.StringRedisSerializer" />

    <bean id="cacheManager" class="org.springframework.cache.support.CompositeCacheManager">
        <property name="cacheManagers">
            <list>
                <ref bean="redisCacheManager" />
            </list>
        </property>
        <!-- 如果最后找不到，因为fallbackToNoOpCache=true，那么将返回一个NOP的Cache否则返回null -->
        <property name="fallbackToNoOpCache" value="true" />
    </bean>

    <!--
注意把Bean的位置，这些Bean不能写到SpringMVC的配置文件里，因为对Session的管理是Spring父容器来完成的，SpringMVC是Spring容器的子容器，父容器看不到子容器的Bean。要么直接写到Spring容器里，要么写到一个单独的XML配置文件里然后Import进Spring容器里。否则会抛出org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named ‘springSessionRepositoryFilter‘ is defined异常。配置的Filter是一个代理对象，他需要一个真正的对象来完成Session管理，真正对象就抛出异常里没有找到的异常。默认情况下去Spring容器里找该真正工作Bean，所以务必要在Spring容器里配出该Bean。
直接 request.getsession.setattr(getattr) 即可，其实现就是直接操作 redis。

    -->
    <!--redis与session    -->
    <bean id="redisHttpSessionConfiguration"
          class="org.springframework.session.data.redis.config.annotation.web.http.RedisHttpSessionConfiguration">
        <property name="maxInactiveIntervalInSeconds" value="600"/>
    </bean>

    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxTotal" value="100" />
        <property name="maxIdle" value="10" />
    </bean>

    <bean id="jedisConnectionFactory"
          class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory" destroy-method="destroy">
        <property name="hostName" value="localhost"/>
        <property name="port" value="6379"/>
        <property name="timeout" value="3000"/>
        <property name="usePool" value="true"/>
        <property name="poolConfig" ref="jedisPoolConfig"/>
    </bean>
    <!-- <bean id="redisUtil" class="com.cme.utils.RedisUtil">
        <constructor-arg index="0" ref="jedisConnFactory" />
    </bean> -->
</beans>