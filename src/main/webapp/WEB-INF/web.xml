
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns="http://java.sun.com/xml/ns/javaee"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
         id="WebApp_ID" version="3.0">
  <display-name>Hyman Web</display-name>

  <context-param>
    <param-name>contextConfigLocation</param-name>
    <param-value>classpath:spring/*.xml</param-value>
  </context-param>

  <context-param>
    <description>日志配置文件的路径</description>
    <param-name>log4j2.configurationFile</param-name>
    <param-value>log4j2.xml</param-value>
  </context-param>

  <listener>
    <listener-class>hyman.config.Log4j2ConfigListener</listener-class>
  </listener>

  <!-- spring 监听器 -->
  <listener>
    <description>springLis</description>
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>

  <!--
    创建一个Servlet过滤器，它用Spring Session支持的HttpSession实现来替换容器本身HttpSession实现。这一步也是Spring Session的核心。
    它对HttpServletRequest 进行包装，然后重写对Session操作的接口，内部调用 SessionRepository 的实现类来对session 进行操作。这就
    Spring Session 如何控制 session的了，最后进行总结一下：

    当我们配置 DelegatingFilterProxy 时，会配置 filter-name:springSessionRepositoryFilter，当我们配置 RedisHttpSessionConfiguration
    这个bean时，这个Filter 则由Spring 生成，而它实际就是 SessionRepositoryFilter。当有请求到达时，DelegatingFilterProxy 委托给
    SessionRepositoryFilter，而它又将 HttpServletRequest,HttpServletResponse 进行一定的包装，重写对session操作的接口，然后将包
    装好的 request,response 传递到后续的Filter中，完成了对Session的拦截操作，后续应用操作的 Session 都是 Spring Session 包装后的
    Session。
  -->
  <filter>
    <filter-name>springSessionRepositoryFilter</filter-name>
    <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
  </filter>
  <filter-mapping>
    <filter-name>springSessionRepositoryFilter</filter-name>
    <url-pattern>/*</url-pattern>
    <dispatcher>REQUEST</dispatcher>
    <dispatcher>ERROR</dispatcher>
  </filter-mapping>

  <!--
    定义 spring 的 shiro 过滤器：
    DelegatingFilterProxy 实际就是 Filter 的一个代理对象。用这个类的好处主要是通过 Spring容器来管理 servlet filter的生命周期，
    还有就是如果 filter中需要一些 Spring容器的实例，可以通过 spring直接注入。另外读取一些配置文件这些便利的操作都可以通过 Spring
    来配置实现。

    targetFilterLifecycle 使 filter 的生命周期交给 spring 管理，即与 spring 的生命周期同步。默认情况下 Spring 会到 IOC容器中
    查找和 <filter-name> 对应的 filter bean。也可以通过 targetBeanName 的初始化参数来配置 filter bean 的 id。
  -->
  <filter>
    <filter-name>shiroFilter</filter-name>
    <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
    <async-supported>true</async-supported>
    <init-param>
      <!-- 该值默认为 false，表示生命周期由 SpringApplicationContext 管理，设为 true 表示由 ServletContainer 管理 -->
      <param-name>targetFilterLifecycle</param-name>
      <param-value>true</param-value>
    </init-param>
    <init-param>
      <!-- 默认值就是当前 filter 的 name -->
      <param-name>targetBeanName</param-name>
      <param-value>shiroFilter</param-value>
    </init-param>
  </filter>
  <filter-mapping>
    <filter-name>shiroFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>

  <servlet>
    <servlet-name>dispatcher</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
    <init-param>
      <param-name>contextConfigLocation</param-name>
      <param-value>classpath:spring/spring-mvc-*.xml</param-value>
    </init-param>
    <load-on-startup>1</load-on-startup>
    <async-supported>true</async-supported>
  </servlet>
  <servlet-mapping>
    <servlet-name>dispatcher</servlet-name>
    <url-pattern>/</url-pattern>
  </servlet-mapping>

  <filter>
    <filter-name>encodingFilter</filter-name>
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    <async-supported>true</async-supported>
    <init-param>
      <param-name>encoding</param-name>
      <param-value>UTF-8</param-value>
    </init-param>
  </filter>
  <filter-mapping>
    <filter-name>encodingFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>


  <welcome-file-list>
    <welcome-file>/index.jsp</welcome-file>
  </welcome-file-list>
</web-app>
