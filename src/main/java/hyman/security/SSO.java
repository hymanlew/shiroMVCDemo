package hyman.security;

public class SSO {

    /**
     单点登录（Single Sign On），简称为 SSO，是目前比较流行的企业业务整合的解决方案之一。SSO的定义是在
     多个应用系统中，用户只需要登录一次就可以访问所有相互信任的应用系统。

     OAuth（开放授权）是一个开放标准，允许用户授权第三方移动应用访问他们存储在另外的服务提供者上的信
     息，而不需要将用户名和密码提供给第三方移动应用或分享他们数据的所有内容，OAuth2.0是OAuth协议的延
     续版本，但不向后兼容OAuth 1.0即完全废止了OAuth1.0。

     首先，SSO是一种思想，或者说是一种解决方案，是抽象的，我们要做的就是按照它的这种思想去实现它。
     其次，OAuth2是用来允许用户授权第三方应用访问他在另一个服务器上的资源的一种协议，它不是用来做单
     点登录的，但我们可以利用它来实现单点登录。在实现SSO的过程中，受保护的资源就是用户的信息（包括，
     用户的基本信息，以及用户所具有的权限），而我们想要访问这这一资源就需要用户登录并授权（spring
     security 或 shiro），OAuth2服务端负责令牌的发放等操作，这令牌的生成我们采用JWT，也就是说 JWT 是用来
     承载用户的Access_Token的（也可以使用原生生成 session，用 redis 存储）。

     单点登陆的需求：
     站点A和站点B提供同一公司的相关服务。现在要求用户只需要登录其中一个网站，然后它就会自动登录到另
     一个网站。怎么做？

     JSON Web Token（JWT 令牌）是目前最流行的跨域身份验证解决方案。
     1，跨域身份验证
     一种解决方案是听过持久化session数据，写入数据库或文件持久层等（即 redis 存储）。收到请求后，验证服
     务从持久层请求数据。
     该解决方案的优点在于架构清晰，而缺点是架构修改比较费劲，整个服务的验证逻辑层都需要重写，工作量
     相对较大。而且由于依赖于持久层的数据库或者问题系统，

     会有单点风险，如果持久层失败，整个认证体系都会挂掉。

     另外一种灵活的解决方案，是通过客户端保存数据，而服务器根本不保存会话数据，每个请求都被发送回服
     务器。 JWT是这种解决方案的代表。

     2，JWT的原则是在服务器身份验证之后，将生成一个JSON对象并将其发送回用户，如下所示。
     {
     "UserName": "Chongchong",
     "Role": "Admin",
     "Expire": "2018-08-08 20:15:56"
     }
     之后，当用户与服务器通信时，客户在请求中发回JSON对象。服务器仅依赖于这个JSON对象来标识用户。为
     了防止用户篡改数据，服务器将在生成对象时添加签名（

     SM2 或其他加密方式）。服务器不保存任何会话数据，即服务器变为无状态，使其更容易扩展。

     3，JWT的数据结构：
     JWT 改对象为一个很长的字符串，字符之间通过"."分隔符分为三个子串。注意JWT对象为一个长字串，各字串
     之间也没有换行符，总共有以下三个部分（JWT头、有

     效载荷和签名)。

     3.1，JWT头部分是一个描述 JWT 元数据的JSON对象，通常如下所示。
     {
     "alg": "HS256",
     "typ": "JWT"
     }
     其中 alg属性表示签名使用的算法，默认为HMAC SHA256（写为HS256）。typ属性表示令牌的类型，JWT令牌统
     一写为JWT。最后使用Base64 URL算法将上述

     JSON对象转换为字符串保存。

     3.2，有效载荷部分，是JWT的主体内容部分，也是一个JSON对象，包含需要传递的数据。 JWT指定七个默认
     字段供选择。

     iss：发行人

     exp：到期时间

     sub：主题

     aud：用户

     nbf：在此之前不可用

     iat：发布时间

     jti：JWT ID用于标识该JWT
     除以上默认字段外，我们还可以自定义私有字段，如下例：

     {
     "sub": "1234567890",
     "name": "chongchong",
     "admin": true
     }
     请注意，默认情况下此段 JWT 是未加密的，任何人都可以解读其内容，因此不要构建隐私信息字段存放保密
     信息，以防止信息泄露。这个 JSON对象也使用Base64

     URL算法转换为字符串保存。

     3.3，签名哈希部分，是对上面两部分数据签名，通过指定的算法生成哈希，以确保数据不会被篡改。
     首先需要指定一个密码（secret）。该密码只保存在服务器中，并且不能向用户公开。然后使用标头中指定的
     签名算法（默认情况下为HMAC SHA256）根据以下公式

     生成签名。
     HMACSHA256(base64UrlEncode(header) + "." + base64UrlEncode(data) + "." + hash(header+data))

     在计算出签名哈希后，JWT头，有效载荷和签名哈希的三个部分组合成一个字符串，每个部分用"."分隔，就构
     成整个JWT对象。

     3.4 Base64URL算法。
     如前所述，JWT头和有效载荷序列化的算法都用到了Base64URL。该算法和常见Base64算法类似，稍有差别。
     作为令牌的 JWT 可以放在URL中（例如api.example/?token=xxx）。 Base64中用的三个字符是"+"，"/"，"="，由于
     在URL中有特殊含义，因此Base64URL中对他

     们做了替换（"="去掉，"+"用"-"替换，"/"用"_"替换），这就是Base64URL算法，很简单把。

     4，JWT的用法：
     客户端接收服务器返回的JWT，将其存储在Cookie或localStorage中。
     此后，客户端将在与服务器交互中都会带JWT。如果将它存储在Cookie中，就可以自动发送，但是不会跨域。
     因此一般是将它放入HTTP请求的Header Authorization

     字段中（Authorization: Bearer）。
     当跨域时，也可以将 JWT 被放置于POST请求的数据主体中。

     5，JWT问题和趋势：
     1、JWT默认不加密，但可以加密。生成原始令牌后，可以使用改令牌再次对其进行加密。

     2、当JWT未加密方法时，一些私密数据无法通过JWT传输。

     3、JWT不仅可用于认证，还可用于信息交换。善用JWT有助于减少服务器请求数据库的次数。

     4、JWT的最大缺点是服务器不保存会话状态，所以在使用期间不可能取消令牌或更改令牌的权限。也就是说
     ，一旦JWT签发，在有效期内将会一直有效。

     5、JWT本身包含认证信息，因此一旦信息泄露，任何人都可以获得令牌的所有权限。为了减少盗用，JWT的
     有效期不宜设置太长。对于某些重要操作，用户在使用时

     应该每次都进行进行身份验证。

     6、为了减少盗用和窃取，JWT不建议使用HTTP协议来传输代码，而是使用加密的HTTPS协议进行传输。

     */
}
