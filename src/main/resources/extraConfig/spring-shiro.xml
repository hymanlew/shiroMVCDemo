<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:util="http://www.springframework.org/schema/util" xsi:schemaLocation="http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
http://www.springframework.org/schema/tx
http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
http://www.springframework.org/schema/aop
http://www.springframework.org/schema/aop/spring-aop-3.2.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">

	<!-- 使用Shiro自带的JdbcRealm类 指定密码匹配所需要用到的加密对象 指定存储用户、角色、权限许可的数据源及相关查询语句 -->
	<bean id="jdbcRealm" class="org.apache.shiro.realm.jdbc.JdbcRealm">
		<property name="credentialsMatcher" ref="credentialsMatcher"></property>
		<property name="permissionsLookupEnabled" value="true"></property>
		<!--<property name="dataSource" ref="dataSource"></property>-->
		<property name="authenticationQuery"
				  value="SELECT password FROM sec_user WHERE user_name = ?"></property>
		<property name="userRolesQuery"
				  value="SELECT role_name from sec_user_role left join sec_role using(role_id) left join sec_user using(user_id) WHERE user_name = ?"></property>
		<property name="permissionsQuery"
				  value="SELECT permission_name FROM sec_role_permission left join sec_role using(role_id) left join sec_permission using(permission_id) WHERE role_name = ?"></property>
	</bean>

	<!-- 数据库保存的密码是使用MD5算法加密的，所以这里需要配置一个密码匹配对象 -->
	<bean id="credentialsMatcher" class="org.apache.shiro.authc.credential.Md5CredentialsMatcher"></bean>


	<!-- 自定义 realm，没加盐的 md5 加密 -->
	<bean id="myRealm" class="hyman.realms.MyRealm">
		<property name="credentialsMatcher">
			<bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
				 <!--指定加密算法 -->
				<property name="hashAlgorithmName" value="MD5" />
				 <!--指定 hash 算法运算的次数 -->
				<property name="hashIterations" value="2" />
			</bean>
		</property>
	</bean>

	<bean id="secondRealm" class="hyman.realms.secondRealm">
		<!-- 如果不加入密码匹配的操作，密码就不会存在。加入了密码匹配器之后，就会默认将前台传递过来的密码自动MD5加密 -->
		<property name="credentialsMatcher">
			<bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
				<!--指定加密算法，两者选其一即可 -->
				<property name="hashAlgorithmName" value="SHA1" />
				<!--<constructor-arg index="0" type="java.lang.String" value="MD5" />-->
				<!--指定 hash 算法运算的次数 -->
				<property name="hashIterations" value="2" />
			</bean>
		</property>
	</bean>


	<!-- 缓存管理，shiro 系统自带的内存缓存系统  -->
	<bean id="cacheManager" class="org.apache.shiro.cache.MemoryConstrainedCacheManager"></bean>

	<!-- 多 realm 多身份验证器-->
	<bean id="authenticator" class="org.apache.shiro.authc.pam.ModularRealmAuthenticator">
		<!--
		AuthenticationStrategy 认证策略接口的默认实现：
			•FirstSuccessfulStrategy：只要有一个Realm 验证成功即可，只返回第一个Realm 身份验证成功的认证信息，其他的忽略；
			•AtLeastOneSuccessfulStrategy：只要有一个Realm验证成功即可，和FirstSuccessfulStrategy不同，将返回所有Realm身份验证成功的认证信息；
			•AllSuccessfulStrategy：所有Realm验证成功才算成功，且返回所有Realm身份验证成功的认证信息，如果有一个失败就失败了。
			•ModularRealmAuthenticator 默认是 AtLeastOneSuccessfulStrategy 策略。
		-->
		<property name="authenticationStrategy">
			<bean class="org.apache.shiro.authc.pam.AtLeastOneSuccessfulStrategy"></bean>
		</property>
	</bean>


	<!-- Session ID 生成器-->
	<bean id="sessionIdGenerator" class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator" />
	<bean id="sessionDao" class="hyman.security.MySessionDao">
		<property name="sessionIdGenerator" ref="sessionIdGenerator" />
		<!-- 设置Session缓存到Eacehc的名字，默认就是shiro-activeSessionCache，它与 ehcache 中定义的名字必须相同 -->
		<property name="activeSessionsCacheName" value="shiro-activeSessionCache" />
	</bean>
	<!-- 启用自定义的 sessionDAO 自定义存储 session，如果只是使用 redis 存储，可以直接使用 spring-session -->
	<bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
		<!-- session超时 30 分钟 -->
		<property name="globalSessionTimeout" value="1800000" />
		<!-- 删除失效的 session -->
		<property name="deleteInvalidSessions" value="true" />
		<!-- Session调度器（确认调度开启），用来检查Session是否还存在 -->
		<property name="sessionValidationSchedulerEnabled" value="true" />
		<property name="sessionValidationScheduler" ref="sessionScheduler" />
		<property name="sessionDAO" ref="sessionDao" />

		<!-- 开启cookie 不然一直登录不上 -->
		<property name="sessionIdCookieEnabled" value="true" />
		<property name="sessionIdCookie" ref="sessionIdCookie" />
	</bean>
	<!-- 全局的会话信息检测，扫描信息间隔为30分钟。 设定检查sesion过期事件（在 sessionManager 中）-->
	<bean id="sessionScheduler" class="org.apache.shiro.session.mgt.quartz.QuartzSessionValidationScheduler">
		<property name="sessionValidationInterval" value="1800000" />
		<property name="sessionManager" ref="sessionManager" />
	</bean>
	<!-- 会话 Cookie模板，使用sid存储sessionid -->
	<bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
		<constructor-arg value="sid"/>
		<property name="httpOnly" value="true"/>
		<!-- 过期时间，-1 为浏览器关闭时失效此Cookie -->
		<property name="maxAge" value="-1"/>
	</bean>


	<!-- 安全管理器，作用是取代了 shiro.ini 配置文件中的配置 -->
    <bean id="securiManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="cacheManager" ref="cacheManager" />
		<!--<property name="rememberMeManager" value="10" />-->
		<!--<property name="realm" ref="jdbcRealm" />-->
		<property name="authenticator" ref="authenticator" />
		<property name="sessionManager" ref="sessionManager" />
		<property name="realms">
			<!-- 认证的顺序是从上到下，依次进行的。-->
			<list>
				<ref bean="myRealm" />
				<ref bean="secondRealm" />
			</list>
		</property>
    </bean>

    <!-- shiro 过滤器，id 名称必须与 web.xml 中配置的 filter-name 一致，否则会启动不了（the JDBC Driver has been forcibly unregistered）  -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <!-- shiro 的核心安全接口，这个属性是必须的 -->
        <property name="securityManager" ref="securiManager" />
        <!-- 身份验证失败，没有登录时，则跳转到登录页面 -->
        <property name="loginUrl" value="/login.jsp" />
		<!--
			它只是做为一种附加配置，只有session中没有用户请求地址时才会使用 successUrl。系统默认的是认证成功后跳转到上
			一次请求的路径，如果是首次请求，那shiro就会跳转到默认虚拟路径“/”，也就是跳转到index.jsp。
			所以建议不配置。
		-->
		<!--<property name="successUrl" value="/welcome" />-->
        <!-- 权限认证失败，则跳转到指定页面 -->
        <property name="unauthorizedUrl" value="/wrongperson.jsp" />
        <!-- shiro 连接约束配置，即过滤链的定义 -->
        <property name="filterChainDefinitions">
			<!-- url 权限匹配顺序，采取第一次匹配优先的方式。即如果是 /**=authc 在第一行，则之后的所有访问都必须登录成功，
				即后面的 url 权限匹配全部失效。 -->
            <value>
                /login=anon
                /logout=anon
                /logout2=logout
                /auth/admin*=authc
                /auth/teach=authc, roles[teacher]
                /auth/stud=authc, perms["user:update"]
            </value>
        </property>
    </bean>

</beans>