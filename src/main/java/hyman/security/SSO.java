package hyman.security;

public class SSO {

    /**
     单点登录（Single Sign On），简称为 SSO，是目前比较流行的企业业务整合的解决方案之一。SSO的定义是在多个应用系统中，用户只需
     要登录一次就可以访问所有相互信任的应用系统。

     OAuth（开放授权）是一个开放标准，允许用户授权第三方移动应用访问他们存储在另外的服务提供者上的信息，而不需要将用户名和密码提
     供给第三方移动应用或分享他们数据的所有内容，OAuth2.0是OAuth协议的延续版本，但不向后兼容OAuth 1.0，即完全废止了OAuth1.0。

     首先，SSO是一种思想，或者说是一种解决方案，是抽象的，我们要做的就是按照它的这种思想去实现它。
     其次，OAuth2是用来允许用户授权第三方应用访问他在另一个服务器上的资源的一种协议，它不是用来做单点登录的，但我们可以利用它来
     实现单点登录。在实现SSO的过程中，受保护的资源就是用户的信息（包括用户的基本信息，以及用户所具有的权限），而我们想要访问这一
     资源就需要用户登录并授权（spring security 或 shiro），OAuth2服务端负责令牌的发放等操作，这令牌的生成我们采用JWT，也就是说
     JWT 是用来承载用户的Access_Token的（也可以使用原生生成 session，用 redis 存储）。

     单点登陆的需求：
     站点A和站点B提供同一公司的相关服务。现在要求用户只需要登录其中一个网站，然后它就会自动登录到另一个网站。


     JSON Web Token（JWT 令牌）是目前最流行的跨域身份验证解决方案。
     JWT的原则是在服务器身份验证之后，将生成一个JSON对象并将其发送回用户。它定义了一种紧凑且独立的方式，可以在各方之间作为 JSON
     对象安全地传输信息。此信息可以通过数字签名进行验证和信任。JWT可以使用秘密（使用HMAC算法）或使用RSA或ECDSA的公钥/私钥对进行
     签名。
     虽然JWT可以加密以在各方之间提供保密，但只将专注于签名令牌。签名令牌可以验证其中包含的声明的完整性，而加密令牌则隐藏其他方的声明。
     当使用公钥/私钥对签署令牌时，签名还证明只有持有私钥的一方是签署私钥的一方。
     通俗来讲，JWT是一个含签名并携带用户相关信息的加密串，页面请求校验登录接口时，请求头中携带JWT串到后端服务，后端通过签名加密串匹配
     校验，保证信息未被篡改。校验通过则认为是可靠的请求，将正常返回数据。

     参考官网：https://jwt.io/

     1，跨域身份验证
     一种解决方案是持久化 session 数据，写入数据库或文件持久层等（即 redis 存储）。收到请求后，验证服务从持久层请求数据。该解决方案的优点
     在于架构清晰，而缺点是架构修改比较费劲，整个服务的验证逻辑层都需要重写，工作量相对较大。而且由于依赖于持久层的数据库或者问题系统，会
     有单点风险，如果持久层失败，整个认证体系都会挂掉。

     另外一种灵活的解决方案，是通过客户端保存数据，而服务器根本不保存会话数据，每个请求都被发送回服务器。 JWT是这种解决方案的代表。

     2，JWT的原则是在服务器身份验证之后，将生成一个JSON对象并将其发送回用户（如 getJWTData() 方法）。
     之后，当用户与服务器通信时，客户在请求中发回JSON对象。服务器仅依赖于这个JSON对象来标识用户。为了防止用户篡改数据，服务器将在生成对象
     时添加签名（SM2 或其他加密方式）。服务器不保存任何会话数据，即服务器变为无状态，使其更容易扩展。

     3，JWT的数据结构为 A.B.C 三部分数据，由字符点"."分割成三部分数据。
     A-header，头信息.
     B-payload，有效负荷，claims是关于实体（常用的是用户信息）和其他数据的声明，是JWT主体中的编码信息。一般包括：已注册信息（registered claims），公开数据(public claims)，私有数据(private claims).
     C-signature，签名信息，是将 header 和 payload 进行加密生成的。
     JWT 改对象为一个很长的字符串，字符之间通过"."分隔符分为三个子串。注意JWT对象为一个长字串，各字串之间也没有换行符。

     3.1，JWT头部分是一个描述 JWT 元数据的JSON对象，通常如下所示。
     {
     "alg": "HS256",
     "typ": "JWT"
     }
     其中 alg属性表示签名使用的散列算法，默认为HMAC SHA256（写为HS256）。typ属性表示令牌的类型，JWT令牌统一写为JWT。最后使用Base64 URL算
     法将上述 JSON 对象转换为字符串保存。

     3.2，有效载荷部分，是JWT的主体内容部分，也是一个JSON对象，包含需要传递的数据。其中包含claims。claims 是关于实体（常用的是用户信息）和
     其他数据的声明，是JWT主体中的编码信息。claims有三种类型： registered,，public，private claims。

     Registered claims：是一组预定义的 claims，非强制性的，但是推荐使用：
     iss：发行人
     exp：到期时间
     sub：主题
     aud：用户
     nbf：在此之前不可用
     iat：发布时间
     jti：JWT ID用于标识该JWT

     Public claims：公共的 claims，注意不要和JWT注册表中属性冲突，这里可以查看JWT注册表。

     Private claims：自定义的 claims，用于在同意使用这些 claims 的各方之间共享信息，它们既不是Registered claims，也不是Public claims。
     {
     "sub": "1234567890",
     "name": "chongchong",
     "admin": true
     }

     请注意，默认情况下此段 JWT 是未加密的，任何人都可以解读其内容，因此不要构建隐私信息字段存放保密信息，以防止信息泄露。
     这个 JSON 对象也使用 Base64 URL算法转换为字符串保存。除非加密，否则不要将敏感信息放入到 Payload 或 Header 元素中。
     JWT的扩展形式是JSON格式，因此每个 claim 都是 JSON 对象中的一个键。

     3.3，签名哈希部分，是对上面两部分数据签名，通过指定的算法生成哈希，以确保数据不会被篡改。必须采用编码的Header，编码的Payload（即是将
     header 和 payload 进行加密生成的）。并且要使用 Header中指定的算法，并对其进行签名。
     首先需要指定一个密码（secret）。该密码只保存在服务器中，并且不能向用户公开。然后使用 headen 中指定的签名算法（默认情况下为HMAC SHA256）
     根据以下公式生成签名。
     HMACSHA256(base64UrlEncode(header) + "." + base64UrlEncode(data), secret)
     在计算出签名哈希后，JWT头，有效载荷和签名哈希的三个部分组合成一个字符串，每个部分用"."分隔，就构成整个JWT对象。

     3.4 Base64URL算法，如前所述，JWT头和有效载荷序列化的算法都用到了Base64URL。该算法和常见Base64算法类似，稍有差别。
     作为令牌的 JWT 可以放在URL中（例如api.example/?token=xxx）。
     Base64 中用的三个字符是"+"，"/"，"="，由于在URL中有特殊含义，因此 Base64URL 中对他们做了替换（"="去掉，"+"用"-"替换，"/"用"_"替换），
     这就是 Base64URL 算法。

     4，JWT的用法：
     客户端接收服务器返回的JWT，将其存储在Cookie或localStorage中。此后，客户端将在与服务器交互中都会带JWT。如果将它存储在Cookie中，就可以
     自动发送，但是不会跨域。因此一般是将它放入 HTTP 请求的 Header Authorization 字段中（Authorization: Bearer）。
     当跨域时，也可以将 JWT 被放置于POST请求的数据主体中。

     JWT工作机制：
     在身份验证中，当用户使用其凭据成功登录时，将返回JSON Web Token（即 JWT）。由于令牌是凭证，因此必须非常小心以防止出现安全问题。一般情况
     下不应将令牌保留的时间超过要求。理论上超时时间越短越好。
     每当用户想要访问受保护的路由或资源时，用户代理应该使用Bearer模式发送JWT，通常在Authorization header中。在某些情况下，这可以作为无状态
     授权机制。服务器的受保护路由将检查 Authorization header 中的有效JWT ，如果有效则允许用户访问受保护资源。如果JWT包含必要的数据，则可以
     减少查询数据库或缓存信息。
     如果在Authorization header中发送令牌，则跨域资源共享（CORS）将不会成为问题，因为它不使用cookie。

     注意：使用签名令牌，虽然他们无法更改，但是令牌中包含的所有信息都会向用户或其他方公开。这意味着不应该在令牌中放置敏感信息。

     使用JWT的好处是什么：
     相比Simple Web Tokens (SWT)（简单Web令牌） and Security Assertion Markup Language Tokens (SAML)（安全断言标记语言令牌），JWT 比 SAML
     更简洁，在 HTML 和 HTTP 环境中传递更方便。
     在安全方面，SWT只能使用HMAC算法通过共享密钥对称签名。但是 JWT 和 SAML 令牌可以使用 X.509 证书形式的公钥/私钥对进行签名。与签名JSON的简单
     性相比，使用XML数字签名可能会存在安全漏洞。
     JSON解析成对象相比XML更流行、方便。

     什么情况下使用JWT比较适合？
     1，授权：这是最常见的使用场景，解决单点登录 SSO 问题或跨域请求验证 oauth2。因为JWT使用起来轻便，开销小，服务端不用记录用户状态信息（无状态），
        所以使用比较广泛；
     2，信息交换：JWT是在各个服务之间安全传输信息的好方法。因为JWT可以签名，例如使用公钥/私钥对儿，可以确定请求方是合法的。此外由于使用标头和有
        效负载计算签名，还可以验证内容是否未被篡改。

     总结：
     优点：在非跨域环境下使用JWT机制是一个非常不错的选择，实现方式简单，操作方便，能够快速实现。由于服务端不存储用户状态信息，因此大用户量，对后
        台服务也不会造成压力。
     缺点：跨域实现相对比较麻烦，需要将 JWT 放置于POST请求的数据主体中，并且要层层加密。因为JWT令牌返回到页面中，可以使用js获取到，如果遇到XSS攻
        击令牌可能会被盗取，在JWT还没超时的情况下，就会被获取到敏感数据信息。


     5，JWT问题和趋势：
     1、JWT默认不加密，但可以加密。生成原始令牌后，可以使用改令牌再次对其进行加密。

     2、当JWT未加密方法时，一些私密数据无法通过JWT传输。

     3、JWT不仅可用于认证，还可用于信息交换。善用JWT有助于减少服务器请求数据库的次数。

     4、JWT的最大缺点是服务器不保存会话状态，所以在使用期间不可能取消令牌或更改令牌的权限。也就是说一旦JWT签发，在有效期内将会一直有效。

     5、JWT本身包含认证信息，因此一旦信息泄露，任何人都可以获得令牌的所有权限。为了减少盗用，JWT的有效期不宜设置太长。对于某些重要操作，用户在使用
        时应该每次都进行进行身份验证。

     6、为了减少盗用和窃取，JWT不建议使用HTTP协议来传输代码，而是使用加密的HTTPS协议进行传输。

     */
}
