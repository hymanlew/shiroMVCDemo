<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/util
        http://www.springframework.org/schema/util/spring-util.xsd">

    <!-- 自定义密码加密策略 -->
    <bean id="passwordService" class="hyman.security.HashedPasswordService">
        <property name="hashAlgorithmName" value="MD5" />
    </bean>

    <!-- 自定义密码验证策略 -->
    <bean id="credentialsMatcher" class="hyman.security.MixHashedCredentialsMatcher">
        <property name="hashAlgorithmName" value="MD5" />
    </bean>

    <!-- 自定义 realm，使用自定义的权限认证 service -->
    <bean id="myRealm" class="hyman.realms.MyRealm">
        <property name="permissionServices">
            <!--
            Spring框架 xml配置文件中，复杂类型属性的注入（数组，list，map，properties）：

            <property name="arr">
                <array>
                    <value>西施</value>
                    <value>貂蝉</value>
                    <value>王昭君</value>
                    <value>杨玉环</value>
                </array>
            </property>

            <property name="list">
                <list>
                    <value>汪精卫</value>
                    <value>周恩来</value>
                    <value>梅兰芳</value>
                    <value>张学良</value>
                </list>
            </property>

            <property name="map">
                <map>
                    <entry key="name" value="swift"></entry>
                    <entry key="profession" value="programmer"></entry>
                    <entry key="city" value="beijing"></entry>
                </map>
            </property>

            <property name="properties">
                <props>
                    <prop key="1">冬天里的一把火</prop>
                    <prop key="2">逆流成河</prop>
                    <prop key="3">男儿当自强</prop>
                </props>
            </property>
            -->
            <array>
                <bean class="hyman.security.PermissionService" />
            </array>
        </property>
        <property name="credentialsMatcher" ref="credentialsMatcher" />
        <!--<property name="cachingEnabled" value="false" />-->
        <property name="authorizationCacheName" value="authorizationCache" />
        <property name="authenticationCacheName" value="authenticationCache" />
    </bean>

    <!-- shiro 整合 ehcache -->
    <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <property name="cacheManagerConfigFile" value="classpath:spring/ehcache.xml" />
    </bean>

    <!-- 配置Session管理器 -->
    <!-- 将 session 交给 servlet 容器来管理配置，并使用 spring-session -->
    <bean id="sessionManager" class="org.apache.shiro.web.session.mgt.ServletContainerSessionManager" />

    <bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <constructor-arg value="rememberMe"/>
        <property name="httpOnly" value="true"/>
        <property name="maxAge" value="2592000"/><!-- 30天 -->
    </bean>

    <!-- rememberMe管理器，cipherKey是加密rememberMe Cookie的密钥；默认AES算法 -->
    <bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">
        <property name="cipherKey"
                  value="#{T(org.apache.shiro.codec.Base64).decode('4AvVhmFLUs0KTA3Kprsdag==')}"/>
        <property name="cookie" ref="rememberMeCookie"/>
    </bean>

    <!-- 安全管理器，作用是取代了 shiro.ini 配置文件中的配置 -->
    <bean id="securiManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="realm" ref="myRealm" />
        <property name="cacheManager" ref="cacheManager" />
        <property name="sessionManager" ref="sessionManager" />
        <property name="rememberMeManager" ref="rememberMeManager" />
    </bean>


    <!-- 自定义登录验证过滤器，redis sso  -->
    <bean id="authenticateFilter" class="hyman.security.AuthenticateFilter">
        <property name="loginUrl" value="${sso.loginUrl}" />
        <property name="logoutUrl" value="${sso.logoutUrl}" />
    </bean>
    <!-- 自定义设备登录验证过滤器，pc or client  -->
    <bean id="clientLoginFilter" class="hyman.security.ClientLoginFilter"></bean>

    <!-- shiro 过滤器，id 名称必须与 web.xml 中配置的 filter-name 一致，否则会启动不了（the JDBC Driver has been forcibly unregistered）  -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <!-- shiro 的核心安全接口，这个属性是必须的 -->
        <property name="securityManager" ref="securiManager" />
        <property name="filters">
            <util:map>
                <entry key="authc" value-ref="authenticateFilter"/>
            </util:map>
        </property>

        <!-- 身份验证失败，没有登录时，则跳转到登录页面。使用 session 后默认就走这个 -->
        <!--<property name="loginUrl" value="/login.jsp" />-->
        <!--
            它只是做为一种附加配置，只有session中没有用户请求地址时才会使用 successUrl。系统默认的是认证成功后跳转到上
            一次请求的路径，如果是首次请求，那shiro就会跳转到默认虚拟路径“/”，也就是跳转到index.jsp。
            所以建议不配置。
        -->
        <!--<property name="successUrl" value="/welcome" />-->
        <!-- 权限认证失败，则跳转到指定页面 -->
        <!--<property name="unauthorizedUrl" value="/wrongperson.jsp" />-->

        <!-- shiro 连接约束配置，即过滤链的定义 -->
        <property name="filterChainDefinitionMap" ref="filterChainMap" />
        <!-- 固定写死的配置，即模拟的数据-->
        <!--<property name="filterChainDefinitions">-->
        <!--&lt;!&ndash; url 权限匹配顺序，采取第一次匹配优先的方式。即如果是 /**=authc 在第一行，则之后的所有访问都必须登录成功，-->
        <!--即后面的 url 权限匹配全部失效。 &ndash;&gt;-->
        <!--<value>-->
        <!--/login=anon-->
        <!--/logout=anon-->
        <!--/logout2=logout-->
        <!--/auth/admin*=authc-->
        <!--/auth/teach=authc, roles[teacher]-->
        <!--/auth/stud=authc, perms["user:update"]-->
        <!--</value>-->
        <!--&lt;!&ndash;-->
        <!--权限访问规则：资源标识符：操作：对象实例ID，即对哪个资源的哪个实例可以进行什么操作。其默认支持通配符权限字符串，-->
        <!--: 用于表示对不同部件的分割；, 表示操作的分割，* 表示任意资源/操作/实例。-->
        <!--通常会使用三个部件：域、操作、被付诸实施的实例。-->

        <!--注意：通配符只能从字符串的结尾处省略部件，也就是说user:edit并不等价于user:*:edit-->
        <!--&ndash;&gt;-->
        <!--</property>-->
    </bean>

    <!-- shiro 连接过滤链配置，从数据库动态获取路径及权限，配置一个 bean，它实际上是一个 map，通过实例工厂的方式 -->
    <bean id="filterChainMap" factory-bean="filterChainBuilder" factory-method="buildFilterChainMap" />
    <bean id="filterChainBuilder" class="hyman.security.FilterChainMapBuilder" />

</beans>